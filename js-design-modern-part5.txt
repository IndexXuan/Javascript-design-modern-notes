@include ch13\ch14\ch15

--- 2014 06 17 - 2014 06 19 ---
第十三章 : 享元模式

    本章主要讨论的是另一种优化模式---享元(flyweight)模式，它最适合于解决因创建大量类似对象而累积的性能问题，这种模
    式在JavaScript中尤其有用，因为复杂的JavaScript代码很快会用光浏览器的可用内存。通过把大量独立的对象转化为少量共
    享对象，可以降低运行web应用程序所需的资源数量。

    13.1  享元的结构

        刚接触享元模式的时候其工作机制可能很难理解。我们先对其结构作一鸟瞰，然后再详细讲解各个部分。

    13.2  示例：汽车登记
        汽车作为一个对象，包含详细信息。

        /* Car class, un-optimized. */

        var Car = function(make, model, year, owner, tag, renewDate) {
          this.make      = make;
          this.model     = model;
          this.year      = year;
          this.owner     = owner;
          this.tag       = tag;
          this.renewDate = renewDate;
        };

        Car.prototype = {
          getMake: function() {
            return this.make;
          },
          getModel: function() {
            return this.model;
          },
          getYear: function() {
            return this.year;
          },

          transferOwnership: function(newOwner, newTag, newRenewDate) {
            this.owner = newOwner;
            this.tag = newTag;
            this.renewDate = newRenewDate;
          },
          renewRegistration: function(newRenewDate) {
            this.renewDate = newRenewDate;
          },
          isRegistration: function() {
            var today = new Date();
            return today.getTime() < Date.parse(this.renewDate);
          }
        };

        //这个系统最初表现不错，可是随着城市人口的增长，汽车对象不断耗尽了资源，要想优化这个系统，可以采用享元模式
        //减少所需对象的数目，优化工作的第一步就是把内在状态与外在状态区分开来。

    13.2.1  内在状态和外在状态
    
        将对象数据划分为内在和外在状态的过程有一定的随意性。既要维持每个对象的模块性，又想尽可能的多的数据作为外
        在数据处理，划分依据多少有些主观性。在本例中，车的自然属性属于内在数据，而所有权属性属于外在数据。这意味
        着对于品牌、型号和出厂日期的每一种组合，只需要一个汽车对象就行。这个数目还是不少的，不过与之前相比已经少
        了几个数量级。每个品牌-型号-出厂日期对应的实例将被所有该类汽车车主共享。下面是新版Car类的代码

        /* Car class， optimized as flyweight. */
        var Car = function(make, model, year) {
          this.make  = make;
          this.model = model;
          this.year  = year;
        };

        Car.prototype = {
          getMake: function() {
            return this.make;
          },
          getModel: function() {
            return this.model;
          },
          getYear: function() {
            return this.year;
          }
        };
        //上述代码删除了所有外在数据，所有的处理登记事宜的方法被转移到一个管理器对象中（不过，也可以将这些方法
        保留，并为其增加对应于各种外在数据的参数），因为现在对象的数据已经被分为两大部分，所以必须由工厂来实例
        化它。

    13.2.2  用工厂进行实例化
        这个工厂很简单，它会检查之前是否已经创建对应于指定品牌-型号-出厂日期组合的汽车，如果存在这样的汽车那么就
        返回，否则就创建一辆新车，并把他保存起来供以后使用。这就确保了对应于每个唯一的内在状态，只会创建一个实
        例：
        /* CarFactory singleton. */

        var CarFactory = (function() {

          return {
            createCar: function(make, model, year) {
              //check to see if this particular combination has been created before.
              if ( createCars[make + '-' + model + '-' + year] ) {
                return createdCars[make + '-' + model + '-' + year];
              }
              //Otherwise create a new instance and save it.
              else {
                var car = new Car(make, model, year);
                createdCars[make + '-' + model + '-' +year] = car;
                return car;
              }
            }
          }; //end of return {}

        })();

    13.2.3  封装在管理器中的外在状态
        要完成这种优化还需要一个对象，所那些从Car对象中删除的数据必须有个保存地点，我们用一个单体来做这
        些数据的管理器。原先的每一个Car对象现在那部分被分割为外在数据及其所属的共享汽车对象的引用这样两部
        分。Car对象与车主数据的组合成为汽车记录(car record)。管理器存储着这两方面的信息它还包含着从原来的
        Car类删除的方法：
        /* CarRecordManager singleton. */

        var CarRecordManager = (function() {

          var carRecordDatabase = {};

          return {
            //Add a new car record into the city's system.
            addCarRecord: function(make, model, year, owner, tag, renewDate) {
              var car = CarFactory.createCar(make, model, year);
              carRecordDatabase[tag] = {
                owner: owner,
                renewDate: renewDate,
                car: car
              };
            },

            //Methods previously contained in the Car class.
            transferOwnership: function(tag, newOwner, newTag, newRenewDate) {
              var record = carRecordDatabase[tag];
              record.owner = newOwner;
              record.tag = newTag;
              record.renewDate = newRenewDate;
            },
            renewRegistration: function(tag, newRenewDate) {
              carRecondDatebase[tag].renewDate = newRenewDate;
            },
            isRegistrationCurrent: function(tag) {
              var today = new Date();
              return today.getTime() < Date.parse(carRecordDatabase[tag].renewDate);
            }
          }; //end of return {}

        })(); 

        //从Car类剥离的所有数据现在都保存在CarRecordManager这个单体中的私用属性carRecordDatabase中。这个
        carRecordDatabase对象要比以前的一大批对象高效很多。那些处理所有权事宜的方法现在也被封装在这个单体中，
        因此它们处理的都是外在数据。
            可以看出，这种优化是以复杂性为代价的。原先有的只是一个类，而现在却变成了一个类和两个单体，把
        一个对象的数据保存在两个不同的地方这种做法也有点令人困惑。但与所解决的性能问题相比，这两点都只是小问
        题。如果运用得当，那么享元模式能够显著的提升程序的性能。

    13.3  管理外在状态

        管理享元对象的外在数据有许多种不同的方法没使用管理器对象是一种常见做法，这种对象有一个集中管理的数据
        （centralized database），用于存放外在状态及其所属的享元对象。
        另一种管理方案是组合模式，可以用对象自身的层次体系来保存信息，而不需要另外使用一个集中管理的数据库。
        组合对象的叶结点全都是享元对象，这样一来这些享元对象就可以在组合对象层次体系中的多个地方被共享。
        对于大型系统的对象层次这非常有用，因为同样的数据用这种方案来表示时所需要的对象的数量要少得多。

    13.4  示例：Web日历

        为了演示用组合对象来保存外在状态的具体做法，下面我们要创建一个Web日历。首先实现的是一个未经优化、未使用享
        元版本。这是一个大型的组合对象，位于最顶层的是代表年份的组合对象。它封装着代表月份的组合对象，而后者又封装
        了代表日期的叶对象。这是一个简单的例子，它会按顺序显示每月中的每一天，还会按顺序显示一年中的各个月：

        见dp_demo13_4 

    13.4.1  把日期对象转化为享元
    
        把CalendarDay对象转化为享元对象的过程很简单。首先，修改CalendarDay类本身，除去其中保存的所有数据，让这些数
        据（日期和父元素）成为外在数据：
        /* CalendarDay class, a flyweight leaf. */

        var CalendarDay = function() {}; //implements CalendarItem
        CalendarDay.prototype = {
          display: function(date, parent) {
            var element = document.createElement('div');
            parent.appendChild(element);
            element.innerHTML = date;
          } 
        };    

        接下来，创建日期对象的单个例子。所有CalendarMonth对象中都要使用这个实例。这里本来也可以像第一个示例那样使用
        工厂来创建该类的实例，不过，因为这个类只需要创建一个实例，所以直接实例化它就行：
        /* Single instance of CalendarDay. */

        var calendarDay = new CalendarDay();

        /* CalendarMonth class, a composite. */

        var CalendarMonth = function(monthNum, numDays, parent) { //implements CalendarItem
          this.monthNum = monthNum;
          this.element = document.createElement('div');
          this.element.style.display = 'none';
          parent.appendChild(this.element);

          this.days = [];
          for ( var i = 0, len = numDays; i < len; i++ ) {
            this.days[i] = calendarDays;
          }
        };
        CalendarMonth.prototype = {
          display: function() {
            for ( var i = 0, len = this.days.length; i < len; i++ ) {
              this.days[i],display(i, this.element);
            }
            this.element.style.display = 'block';
          }
        };

    13.4.2  外在数据保存在哪里
    
        //...

    13.5  示例：工具提示对象
    
        /* Tooltip class, un-optimized. */ 

        var Tooltip = function(targetElement, text) {
          this.target = target;
          this.text = text;
          this.delayTimeout = null;
          this.delay = 1500; //毫秒

          //Create the HTML.
          this.element = document.createElement('div');
          this.element.style.display = 'none';
          this.element.style.position = 'absolute';
          this.element.className = 'tooltip';
          document.getElementsByTagName('body')[0].appendChild(this.element);
          this.element.innerHTML = this.text;

          //Attach the events.
          var that = this; //Correcting the scope.
          addEvent(this.target, 'mouseover', function(e) { that.startDelay(e); } )
          addEvent(this.target, 'mouseout', function(e) { that.hide(); } )
        };
        Tooltip.prototype = {
          startDelay: function(e, text) {
            if ( this.delayTimeout == null ) {
              var that = this;
              var x = e.clientX;
              var y = e.clientY;
              this.delayTimeout = setTimeout(function() {
                that.show(x, y, text);
              }, this.delay);
            }
          },
          show: function(x, y, text) {
            clearTimeout(this.delayTimeout);
            this.delayTimeout = null;
            this.element.innerHTML = text;
            this.element.style.left = x + 'px';
            this.element.style.top = (y + 20) + 'px';
            this.element.style.display = 'block';
          },
          hide: function() {
            clearTimeout(this.delayTimeout);
            this.delayTimeout = null;
            this.element.style.display = 'none';
          }
        };

        /*
          上述的Tooltip类删除了原先的构造函数的所有的参数以及注册的时间处理器的代码。而startDelay和show方法则各自增
          加了一个新的参数，这样一来，要显示的文字就可以作为外在数据传给它们。下一步是创建用作工厂和管理器的那个单
          体。我们把Tooltip类的声明放在TooltipManager这个单体中，这样它就不能在别的地方被实例化：
          /* TooltipManager singleton, a flyweight factory and manager. */

          var TooltipManager = (function() {
            var storedInstance = null;

            /* Tooltip class, as a flyweight. */

            var Tooltip = function() {
              //...
            };
            Tooltip.prototype = {
              //...
            };

            return {
              addTooltip: function(targetElement, text) {
                //GET the tooltip object.
                var tt = this.getTooltip();
                //Attach the events.
                addEvent(targetElement, 'mouseover', function(e) { tt.startDalay(e.text); } )
                addEvent(targetElement, 'mouseout', function(e) { tt.hide(); } )
              },
              getTooltip: function() {
                if ( storedInstance == null ) {
                  storedInstance = new Tooltip();
                }
                return storedInstance;
              }
            };
          })();
          /*
              这个单体有两个方法，分别体现了它的两种角色。getTooltip是工厂方法，它与你之前看待过的其他享元的生成
              方法差不多。addTooltip则是管理器方法，它先获取一个Tooltip对象，然后分别把两个匿名函数注册为目标元素
              的mouseover和mouseout事件监听器。这个例子用不着创建中心数据库，因为那两个匿名函数中生成的闭包已经保
              存了外在数据。现在创建工具提示的代码看起来与之前的有点不一样，在这里应该调用addTooltip方法，而不是实
              例化Tooltip：
              /* Tooltip Usage. */
              TooltipManager.addTooltip($('#link-id'), 'found&lost site');

              PS: iframe垫片技术：
              IE5.5之前的iframe，IE7之前的select是一种window control组件，拥有者一个特定，就是不会被任何HTML元素
              遮挡，即使别的元素定位到其上。但是IE5.5时候，iframe改邪归正，还拥有了新特定，即自己不再是窗口控件
              window control，而且自己可以挡住窗口控件，因此，IE5.5， IE6中普通HTML挡不住的窗口控件可以用iframe
              遮挡且在再挡住iframe，看起来就好像是普通元素直接遮挡了窗口控件，此特定就叫做iframe垫片技术.
          */       

    13.6  保存实例供以后重用

        模式对话框是享元模式的另一个使用场合，与工具提示一样，对话框对象也封装着数据和HTML内容，不过，后者包含的DOM
        更多，因此尽可能的减少实例化更显得重要。问题在于网页上可能会不止出现一个对话框。实际上，你无法确切知道究竟
        需要多少对话框。既然如此，那又怎么能得知需要用到多少实例那？
            因为运行期间需要用到的实例的确切数目无法在开发期间确定，所以不能对实例的个数加以限制，而只能是要用多少
        就创建多少，然后把它们保存起来供以后使用。这样就不用承受其创建过程中的开销，而且所创建的实例的数目也刚好满
        足要求。
            在这个示例中，DialogBox对象的实现细节并不重要，你只需要知道，他是资源密集型的对象，应该尽量少实例化。
        该类的基本实现框架以及它的实现接口如下所示：

        /* DisplayModule interface. */

        var DisplayModule = new Interface('DisplayModule', ['show', 'hide', 'state']);

        /* DialogBox class. */

        var DialogBox = function() { //implements DisplayModule
          //...
        };
        DialogBox.prototype = {
          show: function(header, body, footer) {
            //...
          },
          hide: function() {
            //...
          },
          state: function() {
            //...return visible or hidden
          } 
        }; 

        /* DialogBoxManager singleton. */

        var DialogBoxManager = (function() {
          var created = []; //Stores created instances.

          return {
            displayDialogBox: function(header, body, footer) {
              //...
            },
            createDialogBox: function() { //Factory method.
              //...
            },
            numberInUse: function() {
              //...
            }
          };
        })();

        /*
           这个管理器把已经创建出来的对话框对象保存在数组created中，以便于重用。numberInUse方法用于获取现有的
           DialogBox对象中当前正在被使用的对象的个数，它通过检查DialogBox对象的状态判断其是否正在被使用。
           displaDialogBox方法会先检查这个数字是否不小于数组的长度，并且只有在不能重复重用现有实例的情况下才创建
           新实例。
           中心思想：资源密集型对象剥离重用，就像SQL线程池，仅当现有的连接都耗尽才创建新连接。
        */
    
    13.8  享元优化的步骤

        （1）  剥离外在数据，由管理器提供。
        （2）  创建一个用于控制该类的实例化的工厂，这个工厂应该掌握该类所有已经创建粗俩的独一无二的实例。
        （3）  创建一个用来保存外部数据的管理器。

--- 2014 06 23 - 2014 06 27 ---
第十四章 : 代理模式

    本章讨论的是代理模式，代理（proxy）是一个对象，它可以用来控制对另一个对象的访问。它与另外那个对象实现了同样的
    接口，并且会把任何方调用传递给那个对象。另外那个对象通常称为本体(real subject)。代理可以代替其本体被实例化，并
    使其可被远程访问。它还可以把本体的实例化推迟到真正需要的时候，对于实例化比较费时的本体，或者因尺寸较大以至于不
    用时不适宜保存在内存的本体，这特别有用。在处理那些需要较长时间才能把数据载入用户界面的类时，代理也大有裨益。

    14.1  代理的结构

        代理模式最基本的形式是对访问进行控制。代理对象和另一个对象（本体）实现的是同样的接口。实际上工作还是本体在
    做，它才是负责执行所分派的任务的那个对象或类。代理对象所做的不外乎就是对本体的访问。要注意，代理对象并不会在另
    一个对象的基础上添加方法或修改其方法（就像装饰者那样），也不会简化那个对象的接口（就像门面模式那样）。它实现了
    接口与本体完全相同，所有对它的方法调用都会被传递给本体。

    14.1.1  代理如何控制本体的访问

    （1）不实现任何访问控制的代理

        /* From chapter 3. */

        var Publication = new Interface('Publication', ['getIsbn, 'setIsbn, 'getTitle', 'setTitle', 'getAuthor',
            'setAuthor', 'display']);
        var Book = function(isbn, title, author) { //...}  //implements Publication.
        
        /* Library interface. */

        var Library = new Intreface('Library', ['findBooks', 'checkoutBooks', 'returnBook']);

        /* PublicLibrary class. */

        var PublicLibrary = function(books) { //implements Library.
          this.catalog = {};
          for ( var i = 0, len = books.length; i < len; i++ ) {
            this.catalog[ books[i].getIsbn() ] = { book: books[i], available: true };
          }
        };
        PublicLibrary.prototype = {
          findBooks: function(searchString) {
            var results = [];
            for ( var isbn in this.catalog ) {
              if ( !this.catalog.hasOwnProperty(isbn) ) continue;
              if ( searchString.match( this.catalog[isbn].getTitle() ) || 
                   searchString.match( this.catalog[isbn].getAuthor() ) ) {
                     results.push(this.catalog[isbn]);
                   } 
            }
            return results;
          },
          checkoutBook: function(book) {
            var isbn = book.getIsbn();
            if ( this.catalog[isbn] ) {

              if ( this.catalog[isbn].available ) {
                this.catalog[isbn].available = false;
                return this.catalog[isbn];
              } else {
                throw new Error(' PublicLibrary: book ' + book.getTitle() + ' is not currently available. ');
              }

            } else {
              throw new Error(' PublicLibrary: book ' + book.getTitle() + ' is not found. ');
            }
          }
        };

        /*
         *  这个类非常简单。它可以用来查书，借书和还书。下面是一个没有实现任何访问控制的PublicLibrary类的代理
        */   

        /* PublicLibraryProxy class, a useless proxy. */

        var PublicLibraryProxy = function(catalog) { //implements Library
          this.library = new PublicLibrary(catalog);
        };

        PublicLibraryProxy.prototype = {
          findBooks: function(searchString) {
            return this.library.findBooks(searchString);
          },
          checkoutBook: function(book) {
            return this.library.checkoutBook(book);
          },
          returnBook: function(book) {
            return this.library.returnBook(book);
          }
        };

    14.1.2  虚拟代理、远程代理和保护代理

        对于JavaScript程序员来说，虚拟代理可能是最有用的代理类型。下面我们简要介绍一下其他代理类型，并说明为什么
        它们对JavaScript编程不那么适用。
            远程代理(remote proxy)用于访问位于另一个环境中的对象。在Java中，这意味着另一个虚拟机中的对象，或者是
        地球另一端的某台计算机中的对象。远程对象一般都长期存在，任何时候都可以从任何其他环境中进行访问。这种类型
        的代理很难照搬到JavaScript中。其原因是首先，通常JavaScript运行时环境不可能长期存在。大多数JavaScript环境
        委身于Web了浏览器，因此随着用户的网上冲浪活动，通常没过几分钟，运行时环境就会重新加载一次或卸载一次。第二
        在JavaScript中无法建立到另一个运行时环境的套接字连接以访问其变量空间，即便它能长期存在。因此最接近的只是用
        JSON对方法调用进行序列化，然后用Ajax技术将结果发送给某个资源。
            远程代理的一种更有可能的用途是控制对其他语言的本体的访问。这种本体可能是一个Web服务器资源，也可能是PHP
        对象。在此情况下，很难说你所用的究竟是什么模式。它既可以被视作适配器，也可以被视作远程代理，因此这是一个灰
        色地带，所以有必要为这种模式确定一个名称。我们决定选择远程代理这个名称，原因在于这个名称更具有说明性，也更
        准确，而且这里所说的模式更接近于代理模式而不是适配器模式。第一个例子中对此有更多的讨论。
            保护代理也无法照搬到JavaScript中，它通常用于根据用户的身区别对特定的方法进行访问，JavaScript中无法判断
        调用方法的客户是什么类型，因此也就不可能实现这种模式。
            由于以上原因，本章集中讨论的是虚拟代理和远程代理。

    14.1.3  代理模式和装饰者模式的比较   

            代理在许多方面都很像装饰者。装饰者和虚拟代理都需要对对象进行包装，都要实现同样的接口，而且都把方法的调
        用传递给被包装对象。那么二者究竟有什么区别那。
            （1）代理模式不修改调用的方法
            （2）实例化过程一般包装在代理内部
            （3）代理一个只可以使用一个

    14.2  代理模式的适用场合

            虚拟代理：是一个优化模式，提供了一种创建开销昂贵的对象的资源访问控制。一些类并不需要实例化后立即使用，
        那么就推迟到真正需要使用的时候再实例化。代理还可以在设置的进行过程中提供如："正在加载..."，这样的消息，避免
        用户面对空白页面发呆。
            远程代理：是一个结构模式，访问某种远程资源最好用一个对象来包装它。如果它实现了所有远程资源的所有方法，
        它就是个远程代理，如果会在运行期间添加一些方法，那就是装饰者，如果简化了该资源（或多个远程资源）的接口，那
        它就是门面。远程代理提供访问位于其他环境中的资源的原声JavaScript API。
            总而言之，如果有些类或对象的创建开销较大，而且不需要在实例化完成后立即访问其数据，那么应该使用虚拟代理
        如果你有一种远程资源，并且要为该资源提供的所有功能实现对象的方法，那么应该使用远程代理。
        
    14.3  示例：网页统计

        见dp_demo14_3

    14.4  包装Web服务的通用模式

            我们可以从上面的例子提炼出一个更加通用的Web服务包装模式。尽管在设计这种代理时的具体实现细节会因为Web服
        务类型的而异，但是这个通用模式可以提供一个一般性的框架。由于JavaScript的同源限制，Web服务代理所包装的服务必
        须部署在一个使用代理的网页所造的域中。这里使用的不是一个单体，而是一个拥有构造函数的普通类，以便进行扩展：

        见dp_demo14_4

    14.5  示例：目录查找
    
            这次的任务是为公司的网站的主页添加一个可搜索的员工目录。它应该模仿实际的员工花名册中的页面，从A开始，
        显示其姓氏以特定字母开头的所有员工。由于这个网页的访问量很大，所以这个解决方案必须尽量节省带宽。我们不希
        望这个小小的特性拖累整个页面。
            因为在这个问题中网页的大小很重要，所以我们决定只为那些需要查看员工资料的用户加载这种数据（要知道数据
        量巨大）。这样一来，那些不关心这种信息的用户就不用下载额外的数据。这是虚拟代理可以大显身手的地方，因为它
        能够把需要占用大量贷款的资源推迟到需要的时候再加载。我们还要为数据载入时提供必要的信息，以免用户面对空白
        页面时不知道网站出了什么问题。这种任务非常适合使用虚拟代理。
            首先要做的就是创建代理的呢个本类。它负责获取员工的数据并生成用于网页显示的这些数据的HTML内容，其显示
        格式类似于电话号码簿：
        
        见dp_demo14_5   

    14.6  创建虚拟代理的通用模式

        见dp_demo14_6

    小节:代理模式的利弊
    
        自己领悟。。。

--- 2014 06 28 - 2014 06 29, 2014 0701 - 2014 0702 2014 0830 - 2014 0901 ---          
第十五章 : 观察者模式

    在事件驱动的环境中，比如浏览器这种持续寻求用户关注的环境中，观察者模式（又名发布者-订阅者模式）是一种管理人与
    其任务之间的关系（确切地讲，是对象及其行为的状态之间的关系）的得力工具。用JavaScript的话来说，这种模式的实质
    就是你可以对程序中某个对象的状态进行观察，并且在其发生改变时能够得到通知。
        观察者模式中存在两个角色：观察者和被观察者。本书一般倾向于称其为发布者-订阅者模式。这种模式在JavaScript中
    有几种不同的实现方式，本章将对其中的一些实现方式进行考查。不过我们首先说明一下发布者-订阅者这两种角色。下一节
    的例子以报业为例说明了观察者模式的工作方式。

    15.1  示例：报纸的投送

        在报纸业中，发行和订阅的顺利进行进行依赖于一些关键的角色和行为。首先时读者。他们都是订阅者（subscriber）
        ，是与你我一样的人。我们消费数据并且根据数据读到的消息做出反应。我们可以选择自己的居住地点，让报社把报纸
        送到自己家里来，这个活动中的另一个角色就是发行方（publisher）。他们负责出版诸如xxx的报纸。

        多对多的关系需要我们抽象的更好（一个读者可能订阅许多种报纸，而一家报社可能向许多消费者推送报纸）

    15.1  推与拉的比较
    
        对于报社来说只为给几个订阅者投送报纸就满天下的跑就不划算的，而从纽约去旧金山取报纸更是天方夜谭，所以一
        种主动推送报纸和自主取报更为合理。

    15.1.2  模式的实践
    
        在JavaScript中有多种方法可以实现发布者-订阅者模式。在展示那些示例之前，我们先确保各种角色的扮演者
        （对象）及其行为（方法）都已就绪。
            订阅者可以订阅和退订，他们还要接收，"由人投递"和"自己去取"都可以。
            发布者负责投送，他们可以在"送出"和"由人取"之间进行选择。

        下面是一个展示发布者-订阅者模式之间的互动过程的高层示例，他是Sells方法的一个示范，这种技术类似于
        驱动测试开发（TDD），不过它要先写实现代码，就像API已经写好了一样，为了让这些代码成为可以运转的真正
        实现，程序员需要完成各种该做的工作，API由此形成：

        /*
         *  origin: http://pluralsight.com/blogs/archive/2007/01/24/45864.aspx
        **/            

        /*
         *  Publisher - subscriber 
        **/

        var Publisher = new Observable;

        var Subscriber = function(news) {
          //news delivered directly to my front porch
        };
        Publisher.subscriberCushomer(Subscriber);

        /*
         *  Deliver a paper:
         *  sends out news to all subscribers.
        **/

        Publisher.deliver('extre, extre, read all about it');

        /*
         *  That customer forgot to pay his bill.
        **/
        Publisher.unSubscribeCustomer(Subscriber);
        //这个模型发布者处于明显的主导地位，它们负责登记其顾客，而且有权停止为其投送。最后新的报纸出版后它们将
        //会为其投送给顾客

        /*
         *  Newspaper Vendors
         *  setup as new Publisher object
        **/

        var NewYorkTimes = new Publisher();
        var AustinHerald = new Publisher();
        var SfChronicle = new Publisher();

        /*
          *  People who like to read
          *  (Subscribers)
          *
          *  Each subscriber is set up as a callback method.
          *  They all inherit from Function prototype Object. 
        */

        var Joe = function(from) {
          console.log('Delivery from ' + from + 'to Lindsay');
        };
        var Quadaras = function(from) {
          console.log('Delivery from ' + from + 'to Quadaras');
        };

        /*
          *  Here we allow them to subscribe to newspapers
          *  which are the Publisher objects.
          *  In this case Joe subscribes to NY Times
          *  the Chronicle.Lindsay subscribes to NY Times
          *  Austin Herald and Chronicle.And the Quadaras
          *  respectfully subscribe to the Herald and the Chronicle 
        */

        Joe.
          subscribe(NewYorkTimes).
          subscribe(SfChronicle);

        Lindsay.
          subscribe(AustinHerald).
          subscribe(SfChronicle).
          subscribe(NewYorkTimes);  

        /*
          *  Then at any given time in our application, our publishers can send
          *  off data for the subscribers to consume and react to.
        */
        NewYorkTimes.
          deliver('Here is your paper!Directly from the Big apple.');
        AustinHerald.
          deliver('News').
          deliver('Reviews').
          deliver('Coupons');
        SfChronicle.
          deliver('The werther is still chilly').
          deliver('Hi Mon, I\'m writing a book');

        /*
         *  这个例子中，发布者的创建方式和订阅者接受数据的方式没有多少变化，但拥有订阅和退订权的一方变成了订阅者
         *  当然，负责发送数据的一方还是发布者一方。
        **/      

    15.2  构建观察者API
        在明确了观察者模式中的核心成员后，现在可以着手构建其API了。首先，我们需要一个发布者的构造函数，它为该类实
        例定义了一个类型的数组的属性，用来保存订阅者的引用：
        function Publisher() {
          this.subscribers = [];
        }    

    15.2.1  投送方法
    
        所有的Publisher实例都应该能够投送数据。只要把deliver方法添加到Publisher的prototype中，他能够被所有
        Publisher对象共享：
        Publisher.prototype.deliver = function() {
          this.subscribers.forEach(
            function(fn) {
              fn(data);
            }
          );
          return this;
        };    

        这个方法用JavaScript1.6种的新增的forEach方法逐一处理每一个订阅者，forEach方法会对一个进行从头到尾的遍历
        把每一个索引和整个数组提供一个回调方法，订阅者数组中的没跟“针”都是回调函数，比如Joe。
        deliver方法把this用作返回值，因此可以对该方法进行链式调用，以连续不断地投送数据

    15.2.2  订阅方法

        下一步是给予订阅者订阅的能力：
        Function.prototype.subscribe = function(publisher) {
          var that = this;
          var alreadyExists = publisher.subscribers.some( //有一个返回true则返回true
            function(el) {
              return el === that;
            }
          );
          if ( !alreadyExists ) {
            publisher.subscribers.push(this);
          }
          return this; //支持方法链式调用
        };

    15.2.3  退订方法
    
        //unsubscribe方法可供订阅者用来停止对指定发布者的观察
        Function.prototype.unsubscribe = function(publisher) {
          var that = this;
          publisher.subscribers = publisher.subscribers.filter(
            function(el) {
              return el !== that;
            }
          );
          return this;
        };

        var observerObject = function(data) {
          //process data
          console.log(data);
          //unsubscribe from this publisher
          arguments.callee.unsubscribe(publisherObject);
        };

        observerObject.subscribe(publisherObject); 

    15.3  现实生活中的观察者  

        在现实生活中的观察者对于那些由许多JavaScript程序员合作开发的大型程序特别有用。它可以提高API的灵活性，使并
        行开发的多个实现能够彼此独立的进行修改。作为开发人员，你可以对自己的应用程序中什么是“令人感兴趣的时刻”做出
        决定。你能监听的不再只是click，load，blur等浏览器事件。在富用户界面（rich UI）应用程序中，drag、drop、
        moved，tabSwitch等等都可能令人感兴趣。他们都是在普通浏览器事件的基础上抽象出来的可观察事件，可由发布者对象
        对其监听者广播。

    15.4  示例：动画
    
        动画是在应用程序中实现可观察对象的一个很好的起点。眨眼睛你就能想出至少三个可以观察的时刻：开始，结束和进行中
        在本例中，我们将分别称之为onStart,onComplete和onTween.下面的代码演示了用前面编写的Publisher工具实现这些事件
        的过程：

        //Publisher API
        var Animation = function(o) {
          this.onStart = new Publisher,
          this.onComplete = new Publisher,
          this.onTween = new Publisher;
        };
        Animation.
          method('fly', function() {
            //begin animation
            this.onStart.deliver();
            for( ... ) { //loop through frames
                //deliver frame number
                this.onTween.deliver(i);
            }
            //end animation.
            this.onComplete.deliver();
        });    

        //setup an account with the animation manager
        var Superman = new Animation( { //cfg } );

        //Begin implementing subscribers
        var putOnCape = function(i) {};
        var takeOffCape = function() {};

        putOnCape.subscribe(Superman.onStart);
        takeOffCape.subscribe(Superman.onComplete);

        //fly can be called anywhere
        Superman.fly();
        //for instance:
        addEvent(element, 'click', function() {
          Superman.fly();
        });


    15.5  事件监听器也是观察者

        //example using listeners
        var element = $('example');
        var fn1 = function(e) {
          //handle click
        };
        var fn2 = function(e) {
          //do other stuff with click
        };

        addEvent(element, 'click', fn1);  
        addEvent(element, 'click', fn2);

        //example using handlers
        var element = document.getElementById('b');
        var fn1 = function(e) {
          //handle click
        };
        var fn2 = function(e) { 
          //do other stuff with click
        };

        element.onclick = fn1;  
        element.onclick = fn2; //only exec fn2, fn1 is just replace by fn2  

    15.6  观察者模式的适用场合
    
        如果希望把人的行为和应用程序的行为分开，那么观察者模式正适合于这种场合。最好不要实现一些与用户操作及浏览器提供的
        方法有关的基本DOM事件。对于那些只关心动画的开始，或者错别字的发现（在拼写检查应用程序中）的程序员而言，那些事件提
        供不了什么有用的信息。
        举例来说，用户点击导航系统的一个标签（tab）时，会打开一个包含着更多相关信息的菜单。当然你可以直接监听这个click事件
        不过需要知道监听的是哪个元素。这样做的另一个弊端是你的实现与click事件直接绑定在了一起。比监听click事件更好的方式是
        创建一个onTabChange对象，并且在特定事件发生时通知所有观察者。如果菜单改为在鼠标指向标签时或者标签处于焦点之下时打开，
        那么这个onTabChange对象会替你处理这种改变（及改变此对象监听方法即可）

    15.7  观察者模式之利
    
        观察者模式是开发基于行为的大型应用程序的有力手段。在一次浏览器会话期间会发生大量事件，你可以消减给事件注册监听器的
        数量，让可观察对象借助一个事件监听器替你处理各种行为并将信息委托（delegate）给它的所有订阅者，从而降低内存消耗和提
        高互动性。这样一来，就不用没完没了的为同样的元素添加新的事件监听器，这有利于减少系统的开销并提高程序的可维护性。

    15.8  弊端
    
        初次加载开销大，可通过惰性加载优化，即推迟到需要发送事件通知的时候。